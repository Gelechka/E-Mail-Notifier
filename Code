//Подключение библиотек
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP_Mail_Client.h>
//Объявление светодиодов
#define RED D3
#define GREEN D2
#define BLUE D1
//Информация о подключении к IMAP серверу (сервер, порт, логин, пароль)
#define IMAP_HOST "imap.yandex.com"
#define IMAP_PORT 993
#define AUTHOR_EMAIL "EMAIL"
#define AUTHOR_PASSWORD "PASSWORD"

//Определение имени и пароля от точки доступа Wi-Fi
#define WIFI_SSID "SSID"
#define WIFI_PASSWORD "PASSWORD"
//Функция подключения к Wi-Fi точке доступа
void connectWiFi()
{
    WiFi.disconnect();
    delay(2000);
    Serial.print("Connecting to WiFI");
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    digitalWrite(RED, HIGH);
    digitalWrite(GREEN, HIGH);
    digitalWrite(BLUE, HIGH);
    while (WiFi.status() != WL_CONNECTED)
    {
     Serial.print(".");
     delay(200);
    // Мигание красным цветом показывает процесс подключения к Wi-Fi точке доступа
     digitalWrite(RED, LOW);
     delay(500);
     digitalWrite(RED, HIGH);
    }
    digitalWrite(RED, HIGH);
    digitalWrite(GREEN, HIGH);
    digitalWrite(BLUE, LOW);
    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    Serial.println();
}

void printPollingStatus(IMAPSession &imap);
void imapCallback(IMAP_Status status);
void printAllMailboxesInfo(IMAPSession &imap);
void printSelectedMailboxInfo(SelectedFolderInfo sFolder);
void printMessages(std::vector<IMAP_MSG_Item> &msgItems, bool headerOnly);
void printAttacements(std::vector<IMAP_Attach_Item> &atts);

IMAPSession imap;
ESP_Mail_Session session;
IMAP_Config config;

void setup()
{
//Объявление светодиодов и их пинов
    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(RED, OUTPUT);
    pinMode(GREEN, OUTPUT);
    pinMode(BLUE, OUTPUT);
//Запуск последовательного интерфейса
    Serial.begin(115200);
//Проверка ПО для прошивки esp8266
#if defined(ARDUINO_ARCH_SAMD)
    while (!Serial);
    Serial.println();
    Serial.println("**** Custom built WiFiNINA firmware need to be installed.****\nTo install firmware, read the instruction here, https://github.com/mobizt/ESP-Mail-Client#install-custom-built-wifinina-firmware");
#endif
    Serial.println();
//Подключение к Wi-Fi
    connectWiFi();
//Включение/выключение отладки (0 - выкл, 1 - вкл)
    imap.debug(1);
//Создание imap сессии    
    imap.callback(imapCallback);
    session.server.host_name = IMAP_HOST;
    session.server.port = IMAP_PORT;
    session.login.email = AUTHOR_EMAIL;
    session.login.password = AUTHOR_PASSWORD;
    session.time.ntp_server = F("time.yandex.ru");
    session.time.gmt_offset = 3;
    session.time.day_light_offset = 0;
//Куда подключаться (какую функцию использовать) если пропал интернет
    session.network_connection_handler = connectWiFi;
//Подключение к IMAP серверу с использованием переменных сессии     
    if (!imap.connect(&session, &config))
        return;
//Выбор папки для сканирования на предмет новых писем
    if (!imap.selectFolder(F("INBOX")))
        return;
//Вывод общей информации о почтовом ящике
    printSelectedMailboxInfo(imap.selectedFolder());
}

void loop()
{
//Проверка на наличие новых писем
  if (!imap.listen()) 
   return;
  //Чтение новых писем (или) проверка изменений
  if (imap.folderChanged())
  {printPollingStatus(imap);}
}

void printPollingStatus(IMAPSession &imap)
{
    // Получение информации из выбранной папки 
    SelectedFolderInfo sFolder = imap.selectedFolder();

    // Показ информации о письме
    ESP_MAIL_PRINTF("\nMailbox status changed\n----------------------\nTotal Messages: %d\n", sFolder.msgCount());

    if (sFolder.pollingStatus().type == imap_polling_status_type_new_message)
    {
        
        ESP_MAIL_PRINTF("New message %d, has been addedd, reading message...\n", (int)sFolder.pollingStatus().messageNum);
        imap.stopListen();
        digitalWrite(RED, HIGH);
        digitalWrite(GREEN, HIGH);
        digitalWrite(BLUE, LOW);
        delay(500);
        digitalWrite(BLUE, HIGH);
        digitalWrite(GREEN, LOW);
        delay(5000);
        digitalWrite(RED, HIGH);
        digitalWrite(GREEN, HIGH);
        digitalWrite(BLUE, LOW);

        //Get the UID of new message and fetch
        config.fetch.uid = imap.getUID(sFolder.pollingStatus().messageNum);
        MailClient.readMail(&imap, false);
        //Serial.println("test4");
    }
    else if (sFolder.pollingStatus().type == imap_polling_status_type_remove_message)
        ESP_MAIL_PRINTF("Message %d, has been removed\n\n", (int)sFolder.pollingStatus().messageNum);
    else if (sFolder.pollingStatus().type == imap_polling_status_type_fetch_message)
        ESP_MAIL_PRINTF("Message %d, has been fetched with the argument %s\n\n", (int)sFolder.pollingStatus().messageNum, sFolder.pollingStatus().argument.c_str());
}


void printSelectedMailboxInfo(IMAPSession &imap)
{
    // Получение информации из выбранной папки 
    SelectedFolderInfo sFolder = imap.selectedFolder();

    // Показ информации о письме
    ESP_MAIL_PRINTF("\nInfo of the selected folder\nTotal Messages: %d\n", sFolder.msgCount());
    ESP_MAIL_PRINTF("Predicted next UID: %d\n", sFolder.nextUID());
    ESP_MAIL_PRINTF("Unseen Message Index: %d\n", sFolder.unseenIndex());
    for (size_t i = 0; i < sFolder.flagCount(); i++)
        ESP_MAIL_PRINTF("%s%s%s", i == 0 ? "Flags: " : ", ", sFolder.flag(i).c_str(), i == sFolder.flagCount() - 1 ? "\n" : "");
}

void imapCallback(IMAP_Status status)
{
    Serial.println(status.info());
    if (status.success())
    {
        IMAP_MSG_List msgList = imap.data();
        printMessages(msgList.msgItems, imap.headerOnly());
        imap.empty();
    }
}

void printAllMailboxesInfo(IMAPSession &imap)
{
    FoldersCollection folders;
    if (imap.getFolders(folders))
    {
        for (size_t i = 0; i < folders.size(); i++)
        {
            FolderInfo folderInfo = folders.info(i);
            ESP_MAIL_PRINTF("%s%s%s", i == 0 ? "\nAvailable folders: " : ", ", folderInfo.name, i == folders.size() - 1 ? "\n" : "");
            //Serial.println("test9");
        }
    }
}

void printSelectedMailboxInfo(SelectedFolderInfo sFolder)
{
    ESP_MAIL_PRINTF("\nInfo of the selected folder\nTotal Messages: %d\n", sFolder.msgCount());
    ESP_MAIL_PRINTF("Predicted next UID: %d\n", sFolder.nextUID());
    ESP_MAIL_PRINTF("Unseen Message Index: %d\n", sFolder.unseenIndex());
    for (size_t i = 0; i < sFolder.flagCount(); i++)
        ESP_MAIL_PRINTF("%s%s%s", i == 0 ? "Flags: " : ", ", sFolder.flag(i).c_str(), i == sFolder.flagCount() - 1 ? "\n" : "");
}

void printAttacements(std::vector<IMAP_Attach_Item> &atts)
{
    ESP_MAIL_PRINTF("Attachment: %d file(s)\n****************************\n", atts.size());
    for (size_t j = 0; j < atts.size(); j++)
    {
        IMAP_Attach_Item att = atts[j];
        ESP_MAIL_PRINTF("%d. Filename: %s, Name: %s, Size: %d, MIME: %s, Type: %s, Creation Date: %s\n", j + 1, att.filename, att.name, att.size, att.mime, att.type == esp_mail_att_type_attachment ? "attachment" : "inline", att.creationDate);
    }
    Serial.println();
}

void printMessages(std::vector<IMAP_MSG_Item> &msgItems, bool headerOnly)
{
    for (size_t i = 0; i < msgItems.size(); i++)
    { 
        IMAP_MSG_Item msg = msgItems[i];
        Serial.println("****************************");
        ESP_MAIL_PRINTF("Number: %d\n", msg.msgNo);
        ESP_MAIL_PRINTF("UID: %d\n", msg.UID);
        ESP_MAIL_PRINTF("Messsage-ID: %s\n", msg.ID);        
        ESP_MAIL_PRINTF("Flags: %s\n", msg.flags);
        ESP_MAIL_PRINTF("Attachment: %s\n", msg.hasAttachment ? "yes" : "no");

        if (strlen(msg.acceptLang))
            ESP_MAIL_PRINTF("Accept Language: %s\n", msg.acceptLang);
        if (strlen(msg.contentLang))
            ESP_MAIL_PRINTF("Content Language: %s\n", msg.contentLang);
        if (strlen(msg.from))
            ESP_MAIL_PRINTF("From: %s\n", msg.from);
        if (strlen(msg.sender))
            ESP_MAIL_PRINTF("Sender: %s\n", msg.sender);
        if (strlen(msg.to))
            ESP_MAIL_PRINTF("To: %s\n", msg.to);
        if (strlen(msg.cc))
            ESP_MAIL_PRINTF("CC: %s\n", msg.cc);
        if (strlen(msg.date))
        {
            ESP_MAIL_PRINTF("Date: %s\n", msg.date);
            ESP_MAIL_PRINTF("Timestamp: %d\n", (int)MailClient.Time.getTimestamp(msg.date));
        }
        if (strlen(msg.subject))
            ESP_MAIL_PRINTF("Subject: %s\n", msg.subject);
        if (strlen(msg.reply_to))
            ESP_MAIL_PRINTF("Reply-To: %s\n", msg.reply_to);
        if (strlen(msg.return_path))
            ESP_MAIL_PRINTF("Return-Path: %s\n", msg.return_path);
        if (strlen(msg.in_reply_to))
            ESP_MAIL_PRINTF("In-Reply-To: %s\n", msg.in_reply_to);
        if (strlen(msg.references))
            ESP_MAIL_PRINTF("References: %s\n", msg.references);
        if (strlen(msg.comments))
            ESP_MAIL_PRINTF("Comments: %s\n", msg.comments);
        if (strlen(msg.keywords))
            ESP_MAIL_PRINTF("Keywords: %s\n", msg.keywords);
            //Serial.println("test12");
           
        if (!headerOnly)
        {
            if (strlen(msg.text.content))
                ESP_MAIL_PRINTF("Text Message: %s\n", msg.text.content);
            if (strlen(msg.text.charSet))
                ESP_MAIL_PRINTF("Text Message Charset: %s\n", msg.text.charSet);
            if (strlen(msg.text.transfer_encoding))
                ESP_MAIL_PRINTF("Text Message Transfer Encoding: %s\n", msg.text.transfer_encoding);
            if (strlen(msg.html.content))
                ESP_MAIL_PRINTF("HTML Message: %s\n", msg.html.content);
            if (strlen(msg.html.charSet))
                ESP_MAIL_PRINTF("HTML Message Charset: %s\n", msg.html.charSet);
            if (strlen(msg.html.transfer_encoding))
                ESP_MAIL_PRINTF("HTML Message Transfer Encoding: %s\n\n", msg.html.transfer_encoding);

            if (msg.rfc822.size() > 0)
            {
                ESP_MAIL_PRINTF("RFC822 Messages: %d message(s)\n****************************\n", msg.rfc822.size());
                printMessages(msg.rfc822, headerOnly);
            }
        }

        Serial.println();
    }
}
